// file: listener.cpp
//
// LCM example program.
//
// compile with:
//  $ gcc -o listener listener.cpp -llcm
//
// On a system with pkg-config, you can also use:
//  $ gcc -o listener listener.cpp `pkg-config --cflags --libs lcm`

#include <stdio.h>
#include <iostream>
#include <lcm/lcm-cpp.hpp>
#include "exlcm/example_t.hpp"
#include "PacketIbeo.hpp"
#include "PacketVELD.hpp"

PacketVELD unsafe_veld;
PacketVELD  _veld;
int newveld=0;
class Handler 
{
    public:
        ~Handler() {}

        void handleMessage(const lcm::ReceiveBuffer* rbuf,
                const std::string& chan, 
                const PacketVELD* msg)
        { 
         unsafe_veld=*msg;
          //memcpy(unsafe_veld, *msg, sizeof(PacketVELD));
          newveld=1; 
        }
};

int main(int argc, char** argv)
{
    lcm::LCM lcm;

    if(!lcm.good())
        return 1;

    Handler handlerObject;
    lcm.subscribe("VELD", &Handler::handleMessage, &handlerObject);

    while(0 == lcm.handle())
   {
     if(newveld)
     {

        std::cout<<unsafe_veld.Lane1x[0]<<" "<<unsafe_veld.Lane2x[1]<<" "<<unsafe_veld.Lane3x[2]<<" "unsafe_veld.Lane4x[3]<<" "<<std::endl;
      
newveld=0;
}
    }

    return 0;
}
